  <p>
  
</p>
<%

reponame="/var/lib/git/testdeploy/"+ @software.name + "-test"

 if File.exists?(reponame)
   		%>Opening Repository<br> <%= reponame %><%
 	  	repo = Rugged::Repository.new(reponame)  	  	
   else   	
   		repo  = Rugged::Repository.init_at(reponame)
   		touchcmd= String.new
   		cpcmd = String.new   		
   		
   		mkdircmd = "mkdir -p "+reponame +"/.git/"
   		system(mkdircmd)
   		touchcmd="touch "+ reponame +"/.git/git-daemon-export-ok"
   		system(touchcmd ) 
   		#touchfile = reponame +"/.git/git-daemon-export-ok"
   		#tf = File.new(touchfile)
   		#tf.close  	
   		#cpcmd = "cp /var/lib/git/StackatoScriptSource/*sh  " + reponame
   		#system(cpcmd)
   		
#   		ref = repo.references.create("refs/heads/master", commit_sha)
   end
   
   
   
%>Writting stakacto.yml<br><%

stackato = String.new
  stackato+="name: " + @software.name + "-test\n"
 
  stackato+="memory: " + @software.requiredmemory.to_s 
  stackato+="\n"
  fm=Swframework.find(@software.swframework_id).name
 stackato+="framework:\n"
  stackato+=" type: "+ fm +"\n"
  if(fm.start_with?('rails'))
  	stackato+=" runtime: " +  Langauge.find(@software.langauge_id).name + "\n"
  #	stackato+="buildpack: git://git@54.79.79.134/ruby_buildpack.git\n"
  end
  
  @services = Softwareservice.where("software_id = ?",  @software.id )
  	if @services.count > 0
  		stackato+="services:\n"
  		
  		@services.each do |service|
  			sn=service.name.sub(/ /,'-')
  			st=Servicetype.find(service.servicetype_id).name
  			stackato+=" "+sn+"-test: " +st+"\n"
  		end
  	end
  	
  	@ospackages = Ospackage.where("software_id = ?",  @software.id)
  	if @ospackages.count > 0
  		stackato+="requirements:\n"
  		stackato+=" running:\n"
  		stackato+="  ubuntu:\n"
  		stackato+="   - "
  		@ospackages.each do |ospackage|
  			stackato+= ospackage.name + " "  		
  		end
  		
  		stackato+="\n"
  		  
  	end
  	
  	stackato+="\nhooks:\n pre-staging:\n"
  	stackato+="  - bash stackato-pre-setup.sh\n"
  	stackato+=" post-staging:\n"
  	stackato+="  - bash stackato-setup.sh\n"
  	stackato+=" pre-running:\n"
  	stackato+="  - sh completeinstall.sh\n"
  
  
  
  %>Writing Presettings.env</br><%
   
   @packages = Installedpackage.where("software_id = ?",  @software.id )
   
 archives = String.new
 archlocations = String.new
 archextractcmds  = String.new
 archivenames = String.new
 archdirs = String.new
 
  if @packages.count >0 	
  	@packages.each do |package|
  		 archives = archives + "\"" + package.src + "\" "
  		 archlocations = archlocations + "\"" + package.dest + "\" "
  		 archextractcmds =  archextractcmds + "\"" + package.extractcmd + "\" "
  		 archivenames = archivenames + "\"" + package.name.sub(/ /,'-') + "\" "
  		 	if(package.extractdir)
  		 		archdirs =  archdirs + "\"" + package.extractdir + "\" "
  		 	else
  		 		archdirs =  archdirs + "\"\""
  		 	end
    end
  end
  
  presettings_env = String.new
  presettings_env="#!/bin/bash\ndeclare -a ARCHIVES=(" + archives + ")\n"
   if(@software.configuredfile)
    presettings_env+="INSTALLED_FILE="+@software.configuredfile + "\n" 
   end
   if(@software.toconfigurefile)
  	presettings_env+="INSTALL_SCRIPT="+@software.toconfigurefile + "\n" 
  end
   if(archivenames.length > 0)
  	presettings_env+="declare -a ARCHIVENAMES=( " + archivenames + ")\n"
  	presettings_env+="declare -a ARCHLOCATIONS=( " + archlocations + " )\n"
  	presettings_env+="declare -a ARCHEXTRACTCMDS=(" + archextractcmds + " )\n"
  	presettings_env+="declare -a ARCHDIRS=(" + archdirs + " )\n"
   end
  presettings_env+="FRAMEWORK="+ Swframework.find(@software.swframework_id).name + "\n"
  
  %> <%= presettings_env %> Writing setup.env<br><%
  dirsname = String.new
 filesname = String.new
 sedstrings =  String.new
 sedtargets = String.new
 seddests = String.new
 
@dirs = Persistantdir.where("software_id = ?",  @software.id )
  if @dirs.count >0
  	dirsname = "\""
  	@dirs.each do |dir|
  		dirsname = dirsname  + dir.path + " " 
    end
    dirsname = dirsname + "\""
  end
  
  filesname= String.new
  filesname+="\""
  @files = Persistantfile.where("software_id = ?",  @software.id )
  if @files.count >0  		 	
     	persistant=@files[0].path     	
  	@files.each do |file|
  		filesname = filesname + file.path + " "
     end     
  end
filesname+="\""
  
  
  @sedstrs = Replacementstring.where("software_id = ?",  @software.id )
  if @sedstrs.count >0
  	
  	@sedstrs.each do |sedstr|
  		 sedstrings = sedstrings + "\"" + sedstr.sedstr + "\" "
  		 sedtargets = sedtargets  + "\"" + sedstr.file + "\" "
  		 seddests = seddests + "\"" + sedstr.dest + "\" "
    end
  end
 
 cronjobsstrings=String.new
 
 @cronjobs = CronJob.where("software_id = ?",  @software.id )
  if @cronjobs.count >0
  	@cronjobs.each do | cronjob|
 	  			cronjobsstrings="\"" + cronjob.cronjob + "\" "
 	 end
  end 
 
 setup_env = String.new
 
  setup_env = "#!/bin/bash\nFS=$STACKATO_FILESYSTEM\n\n#if db need to set mysql or pgsql also set DATABASEURL for rails-ruby-herokubuildpack \n"
   if(@software.configuredfile)
  	setup_env+="\nCONFIGURED_FILE="+@software.configuredfile
  end
   if(@software.toconfigurefile)
  	setup_env+="\nINSTALL_SCRIPT="+@software.toconfigurefile 
  	setup_env+="\n"
  end 
  setup_env+="dbname=`echo $VCAP_SERVICES | json mysql | json -a credentials.name`\ndbport=`echo $VCAP_SERVICES | json mysql | json -a credentials.hostname`\ndbuser=`echo $VCAP_SERVICES | json mysql | json -a credentials.username`\ndbpasswd=`echo $VCAP_SERVICES | json mysql | json -a credentials.password`\ndbhost=`echo $VCAP_SERVICES | json mysql | json -a credentials.host`"
   if(dirsname)
  	setup_env+="\nPERSISTANT_DIRS="+dirsname
   end
   if(filesname)
    setup_env+="\nPERSISTANT_FILES="+filesname
   end 
   if(sedstrings && sedstrings.length>0)
  	setup_env+="\ndeclare -a SEDSTRS=("+sedstrings+")"
  	setup_env+="\ndeclare -a SEDTARGETS=("+sedtargets+")"
  	setup_env+="\ndeclare -a SEDDSTS=("+seddests+")"
  end
  	if(persistant)
 	 setup_env+="\nPERSISTANCE_CONFIGURED_FILE="+persistant
   end
    if(cronjobsstrings.length>1)
    	setup_env+="\ndeclare -a CRONJOBS=("+cronjobsstrings+")\n"
    end
    	
     

%>
<p><strong>Stackato.yml</strong></p>
<p>
	<pre>
	<%= stackato%>

</pre>
</p>
<p>Added 
<strong>presettings.env:</strong><br />
<pre>
	<%= presettings_env%>

</pre>
</p>
<p><strong>
	setup.env
	</strong>
<br>
	<pre>
			<%= setup_env %>

NOT in DB model yet
PERSISTANCE_CONFIGURED_FILE=

Not in DB model nor in bash scripts
POST_INSTALL_SCRIPT
POST_INSTALL_ACTION (script or url)

#Not in db model yet to be run from Deploy machine one the first deploy (for automatic software config/setup)
SETUPFORMURL
SETUPFORMACTION
SETUPFLDNAMES
SETUPFIELDVALUES

		
</pre>
	
	 </p>
<%
  
  
   


require 'digest/sha1'
#FIXME to be dynamic value and not just filename
commit_sha = Digest::SHA1.hexdigest 'reponame'


  
         line = "ReadMe for " + @software.name + "\n" + @software.description
  		oid = repo.write(line, :blob)
		index = repo.index
#index.read_tree(repo.head.master.tree)
#index.add(:path => "README.md", :oid => oid, :mode => 0100644)
		index.add(:path => "README.md", :oid => oid, :mode => 0100644)
		
		line = "#stackato.yml\n"
		oid = repo.write(stackato, :blob)
		index.add(:path => "stackato.yml", :oid => oid, :mode => 0100644)
		
		line = "#presettings.env\n"
		oid = repo.write(presettings_env, :blob)
		index.add(:path => "presettings.env", :oid => oid, :mode => 0100644)
		
		line = "#setup.env\n" + setup_env
		oid = repo.write(setup_env, :blob)
		index.add(:path => "setup.env", :oid => oid, :mode => 0100644)

		

		options = {}
		options[:tree] = index.write_tree(repo)

		options[:author] = { :email => "deploy@enginepad.com", :name => 'Software Deployer', :time => Time.now }
		options[:committer] = { :email => "deploy@enginepad.com", :name => 'Software Deployer', :time => Time.now }
		options[:message] ||= "updated by Software Deployer at dd-mm-yy:h:m:s logged in as user"
		options[:parents] = repo.empty? ? [] : [ repo.head.target ].compact
		options[:update_ref] = 'HEAD'

		Rugged::Commit.create(repo, options)
		
    
  %>
  Committed <%= repo.path %>

 <%= link_to 'Back', software_path %>
 
