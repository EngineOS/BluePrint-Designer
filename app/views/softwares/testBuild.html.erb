  <p>
  <%= link_to 'Back', software_path %>
</p>

<hr>

 <p>

<%



gitdir=ENV["GITDIR"]
	if gitdir == nil
		gitdir="/var/lib/git"
	end
reponame=gitdir + "/testdeploy/"+ @software.name + "-test"

 if File.exists?(reponame)
   		%>Opening Repository<br> <%= reponame %><%
 	  	repo = Rugged::Repository.new(reponame)  	  	
   else   	
   		repo  = Rugged::Repository.init_at(reponame)
   		touchcmd= String.new
   		cpcmd = String.new   		
   		
   		mkdircmd = "mkdir -p "+reponame +"/.git/"
   		system(mkdircmd)
   		touchcmd="touch "+ reponame +"/.git/git-daemon-export-ok"
   		system(touchcmd ) 
   		
   end
   
   
   
%>
<%

 ActiveRecord::Base.include_root_in_json = true
cjs = @software.to_json( 
						include: 
							[                             					
							{softwareservices: { 
								only: 
									[:name,:dest,:comment],   
								methods:
									[:servicetype_name]
									}},
							{persistantdirs: {only: [:path,:comment]}},
							{persistantfiles: {only: [:path,:comment]}},
							{replacementstrings: {only: [:sedstr,:file,:dest,:comment]}},
						
							{installedpackages: {only: [:name,:src,:dest,:extractcmd,:extractdir,:comment]}},
							{cron_jobs: {only: [ :cronjob,:description]}},
							{ospackages: {only: [:name,:comment]}},
							{blocking_worker: {only: [:name,:comment,:command]}},
							{environment_variables: {only: [:name,:comment,:value,:ask_at_runtime]}},
							{worker_commands: {only: [:name, :comment,:command]}},
							{work_ports: {only: [:name,:external,:port,:comment]}},
							] , 
						only:
						#[ :name,:description],
							[ :name,:description,:version,:updated_at,:requiredmemory,:toconfigurefile,:configuredfile],
						methods: 
						       [:langauge_name,:swframework_name,:license_name]
						       )

   
cjs_str= cjs.to_s

require 'digest/sha1'
#FIXME to be dynamic value and not just filename
commit_sha = Digest::SHA1.hexdigest 'reponame'


  
         line = "ReadMe for " + @software.name + "\n" + @software.description
  		oid = repo.write(line, :blob)
		index = repo.index
#index.read_tree(repo.head.master.tree)
#index.add(:path => "README.md", :oid => oid, :mode => 0100644)
		index.add(:path => "README.md", :oid => oid, :mode => 0100644)
		
		
		line = "#blueprint.json\n" + cjs_str
		oid = repo.write(cjs_str, :blob)
		index.add(:path => "blueprint.json", :oid => oid, :mode => 0100644)


		options = {}
		options[:tree] = index.write_tree(repo)

		options[:author] = { :email => "deploy@enginepad.com", :name => 'Software Deployer', :time => Time.now }
		options[:committer] = { :email => "deploy@enginepad.com", :name => 'Software Deployer', :time => Time.now }
		options[:message] ||= "updated by Software Deployer at dd-mm-yy:h:m:s logged in as user"
		options[:parents] = repo.empty? ? [] : [ repo.head.target ].compact
		options[:update_ref] = 'HEAD'

		Rugged::Commit.create(repo, options)
		
    
  %>
  <%= cjs_str %> <hr>
  Committed <%= repo.path %>

 <%= link_to 'Back', software_path %>
 
